const fs = require('fs-extra');
const path = require('path');
const axios = require('axios');

module.exports.config = {
  name: "autodl",
  version: "2.0.4",
  permssion: 0,
  prefix: true,
  credits: "LocDev (Merged & Converted by ChatGPT)",
  description: "‡¶Ö‡¶ü‡ßã ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°",
  category: "üì• ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ",
  usages: "[‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶Ö‡¶•‡¶¨‡¶æ help]",
  cooldowns: 5,
  dependencies: {
    "fs-extra": "",
    "axios": ""
  }
};

module.exports.onStart = async function ({ api, event, args }) {
  if (args[0] === 'help') {
    return api.sendMessage(
      'üì• Autodl ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡¶ó‡ßÅ‡¶≤‡ßã ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì/‡¶Ö‡¶°‡¶ø‡¶ì/‡¶á‡¶Æ‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá:\n\nTiktok, Instagram, Facebook, YouTube, Threads, Capcut, Pinterest, Soundcloud, Spotify ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶∞‡¶ì ‡¶Ö‡¶®‡ßá‡¶ï ‡¶ï‡¶ø‡¶õ‡ßÅ‡•§\n\n‚û§ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá‡¶á ‡¶¨‡¶ü ‡¶Ö‡¶ü‡ßã ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶¨‡ßá‡•§',
      event.threadID,
      event.messageID
    );
  }
};

module.exports.onChat = async function ({ api, event }) {
  const { body, messageID, threadID } = event;
  if (!body) return;

  const url = body.trim();
  if (!/^http(s)?:\/\//.test(url)) return;

  const platforms = [
    /instagram\.com/, /facebook\.com/, /pinterest\.com/, /soundcloud\.com/, /capcut\.com/,
    /spotify\.com/, /x\.com/, /tiktok\.com/, /youtube\.com/, /threads\.net/, /zingmp3\.vn/
  ];

  const matched = platforms.some(p => p.test(url));
  if (!matched) return;

  let res;
  try {
    res = await axios.get(`https://j2down.vercel.app/download?url=${url}`);
  } catch (err) {
    console.error('‚ùå Download API error:', err.message);
    return api.sendMessage('‚ö†Ô∏è ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° API ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§', threadID, messageID);
  }

  const data = res.data;
  if (!data || !Array.isArray(data.medias) || data.medias.length === 0) {
    return api.sendMessage('‚ùå ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§', threadID, messageID);
  }

  const cacheDir = path.join(__dirname, 'cache');
  if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

  const files = [];

  for (let i = 0; i < data.medias.length; i++) {
    const media = data.medias[i];
    const ext = media.type === 'video' ? 'mp4' : media.type === 'audio' ? 'mp3' : 'jpg';
    const filePath = path.join(cacheDir, `${Date.now()}_${i}.${ext}`);

    try {
      const response = await axios.get(media.url, { responseType: 'arraybuffer' });
      fs.writeFileSync(filePath, response.data);
      files.push(fs.createReadStream(filePath));
      setTimeout(() => fs.unlink(filePath, () => {}), 60 * 1000);
    } catch (err) {
      console.error('‚ùå ‡¶Æ‡¶ø‡¶°‡¶ø‡¶Ø‡¶º‡¶æ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ:', err.message);
    }
  }

  return api.sendMessage({
    body: `üì• ${data.title || "Downloaded Media"}`,
    attachment: files
  }, threadID, messageID);
};
