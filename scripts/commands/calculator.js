module.exports.config = {
  name: "calculator",
  version: "1.1.0",
  permission: 0,
  credits: "Modified by Rebel from August Quinn",
  description: "рж╕рж░рж▓ ржЧрж╛ржгрж┐рждрж┐ржХ рж╣рж┐рж╕рж╛ржм ржПржмржВ ржЗржЙржирж┐ржЯ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзБржи",
  prefix: true,
  category: "with prefix",
  usages: "[ржЕржкрж╛рж░рзЗрж╢ржи ржмрж╛ ржЪрж┐рж╣рзНржи] [рж╕ржВржЦрзНржпрж╛]",
  cooldowns: 5,
};

module.exports.run = async function({ api, event, args }) {
  const { threadID, messageID, senderID } = event;

  const getUserInfo = async (api, userID) => {
    try {
      const userInfo = await api.getUserInfo(userID);
      return userInfo[userID].name;
    } catch (error) {
      console.error(`Error fetching user info: ${error}`);
      return "";
    }
  };

  const userName = await getUserInfo(api, senderID);

  if (args.length < 2) {
    return api.sendMessage(`ржкрзНрж░рж┐ржпрж╝ ${userName}, рж╕ржарж┐ржХржнрж╛ржмрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:\n\n/calc [ржЕржкрж╛рж░рзЗрж╢ржи ржмрж╛ ржЪрж┐рж╣рзНржи] [рж╕ржВржЦрзНржпрж╛]\n\nржЙржжрж╛рж╣рж░ржг: /calc + рзл рззрзж`, threadID, messageID);
  }

  const operation = args[0].toLowerCase();
  const numbers = args.slice(1).map(arg => parseFloat(arg));

  if (numbers.some(isNaN)) {
    return api.sendMessage(`тЪая╕П ${userName}, ржжржпрж╝рж╛ ржХрж░рзЗ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржкрзНрж░ржжрж╛ржи ржХрж░рзБржиред`, threadID, messageID);
  }

  let result;

  switch (operation) {
    case "add":
    case "+":
      result = numbers.reduce((acc, val) => acc + val, 0);
      break;
    case "subtract":
    case "-":
      result = numbers.reduce((acc, val) => acc - val);
      break;
    case "multiply":
    case "*":
    case "x":
      result = numbers.reduce((acc, val) => acc * val, 1);
      break;
    case "divide":
    case "/":
      result = numbers.reduce((acc, val) => acc / val);
      break;
    case "power":
      result = Math.pow(numbers[0], numbers[1]);
      break;
    case "mass":
      result = numbers[0] * 2.20462; // ржХрзЗржЬрж┐ ржерзЗржХрзЗ ржкрж╛ржЙржирзНржб
      break;
    case "temperature":
      result = (numbers[0] * 9/5) + 32; // рж╕рзЗрж▓рж╕рж┐ржпрж╝рж╛рж╕ ржерзЗржХрзЗ ржлрж╛рж░рзЗржирж╣рж╛ржЗржЯ
      break;
    case "time":
      result = numbers[0] / 60; // рж╕рзЗржХрзЗржирзНржб ржерзЗржХрзЗ ржорж┐ржирж┐ржЯ
      break;
    case "speed":
      result = numbers[0] * 3.6; // ржорж┐ржЯрж╛рж░/рж╕рзЗржХрзЗржирзНржб ржерзЗржХрзЗ ржХрж┐ржорж┐/ржШржгрзНржЯрж╛
      break;
    default:
      return api.sendMessage(`ржкрзНрж░рж┐ржпрж╝ ${userName}, ржПржЗ ржЕржкрж╛рж░рзЗрж╢ржиржЯрж┐ рж╕ржорж░рзНржерж┐ржд ржиржпрж╝ред\n\nржЖржкржирж┐ ржПржЗ ржЕржкрж╛рж░рзЗрж╢ржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи:\nтЮЬ + ржмрж╛ add (ржпрзЛржЧ)\nтЮЬ - ржмрж╛ subtract (ржмрж┐ржпрж╝рзЛржЧ)\nтЮЬ * ржмрж╛ multiply (ржЧрзБржг)\nтЮЬ / ржмрж╛ divide (ржнрж╛ржЧ)\nтЮЬ power (ржШрж╛ржд)\nтЮЬ mass (ржУржЬржи рж░рзВржкрж╛ржирзНрждрж░)\nтЮЬ temperature (рждрж╛ржкржорж╛рждрзНрж░рж╛ рж░рзВржкрж╛ржирзНрждрж░)\nтЮЬ time (рж╕ржоржпрж╝ рж░рзВржкрж╛ржирзНрждрж░)\nтЮЬ speed (ржЧрждрж┐ рж░рзВржкрж╛ржирзНрждрж░)`, threadID, messageID);
  }

  const message = `ЁЯзо ЁЭЧЦЁЭЧФЁЭЧЯЁЭЧЦЁЭЧиЁЭЧЯЁЭЧФЁЭЧзЁЭЧвЁЭЧе\n\n${userName}, ржЖржкржирж╛рж░ "${operation}" рж╣рж┐рж╕рж╛ржмрзЗрж░ ржлрж▓рж╛ржлрж▓ рж╣рж▓рзЛ: ${result}`;

  api.sendMessage(message, threadID, messageID);
};
